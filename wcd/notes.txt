request  ------------> 
         <-----------


code
1xx
  informational

2xx (successful)
    200 OK
    201 created
    204 no content

3xx  redirect
  

4xx  client side error
     401  bad request
     403  forbidden
     404  not found


5xx server side error
    500
-----------------------------------------
HTTP method
1. get => default
2. post

3. put
4. post
5. delete


Request:
  header
  body

response:
  header
  body



Use case:
  dynamic page


Servelet => serve the request

            Servlet<interface>



          abstract class HTTPServelet    XYZ
          service(...){
            if(request is get){
                doGet()
            }else{
                doPOst()
            }
          }



             MyServlet   ->  a.do


step 1:
   create Servlet

step 2: 
    map the request with the servlet
    mapping can be done in 2 way.
    1. using web.xml
    2. using annotation




difference b/w get vs post

get method:
http://localhost:9091/25_WCD1/login?username=Amol&password=abcd

get can be bookmark

data is sent in URL


post method:
http://localhost:9091/25_WCD1/login
data in sent in the body

post data cannot be bookmark



Core Java

 LoginServelt
    service(HttpRequest req, HttpResponse res){

    }


LoginServelt  ob = new LoginServelt();
//object of HTTpRequest 
//Object of HttpResponse
ob.service(req, resp)

Container  => Manage the lifecycle of servlet


Lifecycle of Servlet
-------------------------
instantiation
   either at the time of server start or when you make the first request
   load-on-startup => +ve then object will create when server start
   load-on-startup => -ve (default) then object will create at first request


init()
service()
destroy()

-----------------------------------------
init-param vs context-param


/one -> ServletOne -> doGet
/two -> ServletTwo -> doGet


filePassword= 12345678
dbPassword = abcdefgh
<init-param>
    <param-name>filePassword</param-name>
    <param-value>12345678</param-value>
</init-param>


<context-param>
    <param-name>dbPassword</param-name>
    <param-value>abcdefgh</param-value>
</context-param>



-----------------------------------------------------

sticky notes

request
session
context/application

ServletA  
context.setAttribute("a","apple"); 
key-> string
value  -> object  




ServletB
context.getAttribute("a"); -> apple


----------------
step to create servlet
class extends HTTPServlet

mapping in xml



---------------------------------------------------------------
Servlet COllabaratio
1. RequestDispatcher
      forward
      include

      request

2. Send redirect
      response


ServletA




ServletB


login
  username
  password
  submit ------------Request  /login----------->   server
                                           validation
                                           if valid user 
                                               resposne => homepage
                                                   display the list of friends
                                                   texfield   submit(Add friends)
                                            else
                                               not valued username and password



add Friend ---------/addFriend------>  server
                                       username & friend

web
client ---> Servlet
                -------Bussinees Logic(Service clas)--->  dao class ---->  db
                                                     



on click of Friend button
   request -> GET:  /addFriend




HTTP -> is stateless

----------------------------

different ways to manage session tracking
1. hidden parameter
2. cookie  ->
3. session object


req1 -> resp
req2 -> resp

req1
Login -> username & pwd


homepage hide(useranme=Jack)
addFriend(req2) -> friendName


token (ip,username,)












request.getSession()
   if there is no session object, then create the session object else give the existing object 


request.getSession(true);
   create the new session objectd

request.getSession(false);
   give the existing session


----------------------------------
JSP

JSP: Java server page
      Java in HTML

Servlet => HTML in Java
   out.println("<>");


type of tag in JSP
<% %> scriptlet
<%! %> declaration
<%= %> expression
<%@  %> directive tag => page, inlcue, taglib
<%-- --%> jsp comment
<!-- --> HTML comment

JSP ->  servlet



Servlet
class MyServlet exteds HppServlet{
    int x = 100;
    public void init(){}
    int a = 1000;
    public void service(request, response){
        int a = 10;
        PrintWriter out = response.getWriter();
        out.println("a ="+a);
    }

    public void destroy(){

    }

}


scriplet
---------
<%
 //all the code will be inside service method
 int b = 10;
 int b =10;
 int a = 100;
%>

_____________________________________________________________________

Expression
----------
<%= whatever you are writing inside expression => it will be in out.println() %>
<%= 10> out.println(10);
<%= 'a' %>  out.println('a');
<%= b %>    out.println(b);
<%= "hello world" %>  out.println("hello world";);
<%= a==100; %>  out.println(a==100);

_____________________________________________________________________


declaration
-------------
<%! what ever you are write in this tag will be written inside the class   %>
<%! int x = 100 ; %>
_____________________________________________________________________
<%@  %> Directive tag
page
   import
   errorPage ="pagename.jsp"
   isErrorPage="true"


include 

taglib



_____________________________________________________________________

difference b/w Html comment<!-- --> and jsp comment<%-- -->






_____________________________________________________________________
Lifecycle of JSP(a.jsp)
---------------------   
transalation  a_jsp.java
compilation   a_jsp.class
loading
instantiation
jspInit
jspService
jspDestroy


implicit object
------------------
request         HttpServletRequest
response        HttpServletResponse
config          ServletConfig
application     ServletContext
out             JspWriter
session         HttpSession
pageContext     pageContext
page            Object
exception       Throwable


_____________________________________________________________________
Type of scope in jsp
-----------------
page 
request 
session 
application


_____________________________________________________________________
Expession Language:


_____________________________________________________________________
difference between <%@ page include >  vs  <jsp:include>

@page include will include the content before tranlastion(at complie time)
jps:include wil include the content after jsp lifecycle(at run time)

hearder = 10
footer = 5

page1           page2           page3
100             50                 70


header.jsp -->   header_jsp.class
footer.jsp


----------------------------------------------------------------
Action Param:
jsp:include , jsp:forward
jsp:useBean
jsp:setProperty
jsp:getProperty


Registration.jsp ->  page1.jsp  --- forwarding -> result1.jsp
login of fecthing and seting into the session object  and request object=> page1.jsp
we are using scriplet

ideally, we need to avoid scriplet.

we can avoid using action params

<jsp:useBean id="u1" class="com.seed.entity.User" scope="session">
</jsp:useBean>

User u1 = new User();
session.setAttribute("u1", u1);


_____________________________________________________________________
Expression Language:

it help to access the data from request, session, application, param, cookie.
${expression}


Implicit object
---------------
pageScope
requestScope
sessionScope
applicationScope
param
paramValues
header
headerValues 
cookie
pageContext
initParam




Employee
   Address => null
      city

Employee emp = new Employee();
emp.getAddress().getCity();
if(emp != null && emp.getAddress() != null && emp.getAddress().getCity()){
    printt value of city
}




_____________________________________________________________________

JSTL: Jsp standard tag library
1. avoid scriplet
2. modularity
3. fast development
4. easy to use 

Type of tag 
-----------
Core tags : 
XML tags 
sql tags 
function tags 

Step to use jstl 
----------------
1. download the jar : http://www.java2s.com/Code/Jar/j/Downloadjstl12jar.htm
2. copy the jar into lib folder
3. use taglib directive for the jstl
4. ready to use the tag


2: jstl + mvc design pattern 
2. xml introduction + small crud operation project 


